import React, { useEffect, useRef } from 'react';
import 'ol/ol.css';
import { Map, View } from 'ol';
import TileLayer from 'ol/layer/Tile';
import TileWMS from 'ol/source/TileWMS';

const MapComponent = ({ selectedState, selectedDistrict, selectedTaluka }) => {
    const mapRef = useRef(null);
    const layersRef = useRef([]);

    const updateTheMap = async (layerName, filterFieldName, filterValue) => {
        const layer = new TileLayer({
            source: new TileWMS({
                url: 'http://localhost:8080/geoserver/cite/wms',
                params: {
                    LAYERS: layerName,
                    TILED: true,
                    CQL_FILTER: filterValue ? `${filterFieldName} = '${filterValue}'` : undefined,
                },
                serverType: 'geoserver',
                crossOrigin: 'anonymous',
            }),
        });

        if (filterValue) {
            const extentUrl = `http://localhost:8080/geoserver/wfs?service=WFS&version=1.1.0&request=GetFeature&typeName=${layerName}&CQL_FILTER=${filterFieldName}='${filterValue}'&outputFormat=application/json`;
            try {
                const response = await fetch(extentUrl);
                const data = await response.json();
                if (data.features.length > 0) {
                    const extent = data.features[0].bbox; // Bounding box: [minX, minY, maxX, maxY]
                    if (extent) {
                        mapRef.current.getView().fit(extent, { duration: 1000, maxZoom: 10 });
                    }
                }
            } catch (error) {
                console.error("Error fetching extent:", error);
            }
        }

        return layer;
    };

    useEffect(() => {
        if (!mapRef.current) {
            mapRef.current = new Map({
                target: 'map',
                layers: [
                    new TileLayer({
                        source: new TileWMS({
                            url: 'http://localhost:8080/geoserver/cite/wms',
                            params: { LAYERS: 'india_boundary', TILED: true },
                            serverType: 'geoserver',
                            crossOrigin: 'anonymous',
                        }),
                    }),
                ],
                view: new View({
                    center: [0, 0],
                    zoom: 2,
                }),
            });
        }

        const map = mapRef.current;
        const baseLayer = map.getLayers().item(0);
        map.getLayers().clear();
        map.addLayer(baseLayer);

        const updateMap = async () => {
            const newLayers = [];
            if (selectedState && !selectedDistrict && !selectedTaluka) {
                newLayers.push(await updateTheMap('state_boundry_21_03_2023', 'stcode11', selectedState));
            }
            if (selectedState && selectedDistrict && !selectedTaluka) {
                newLayers.push(await updateTheMap('district_boundry_21_03_2023', 'dtcode11', selectedDistrict));
            }
            if (selectedState && selectedDistrict && selectedTaluka) {
                newLayers.push(await updateTheMap('taluka_boundry_21_03_2023', 'name11', selectedTaluka));
            }

            newLayers.forEach((layer) => map.addLayer(layer));
            layersRef.current = newLayers;
        };

        updateMap();

        return () => {
            layersRef.current.forEach((layer) => {
                map.removeLayer(layer);
            });
            layersRef.current = [];
        };
    }, [selectedState, selectedDistrict, selectedTaluka]);

    return <div id="map" style={{ width: '100%', height: '500px' }}></div>;
};

export default MapComponent;


---------------------------------------------------------------------------------------------------------


import React, { useState, useEffect } from "react";
import Select from "react-select";
import { Button, IconButton, Box, Paper, Typography } from "@mui/material";
import CloseIcon from "@mui/icons-material/Close";
import NavigationIcon from "@mui/icons-material/Navigation";
import axios from "axios";
import MapComponent from "./MapComponent";

const MapNavigation = () => {
    const [isOpen, setIsOpen] = useState(false);
    const [states, setStates] = useState([]);
    const [districts, setDistricts] = useState([]);
    const [talukas, setTalukas] = useState([]);
    const [selectedState, setSelectedState] = useState(null);
    const [selectedDistrict, setSelectedDistrict] = useState(null);
    const [selectedTaluka, setSelectedTaluka] = useState(null);

    const BASE_URL = "http://localhost:8080/api/map";

    useEffect(() => {
        if (isOpen) {
            fetchStates();
        }
    }, [isOpen]);

    const fetchStates = async () => {
        try {
            const response = await axios.get(`${BASE_URL}/getStates`);
            setStates(
                response.data.map((state) => ({
                    value: state.stcode11,
                    label: state.stname,
                }))
            );
        } catch (error) {
            console.error("Error fetching states:", error);
        }
    };

    const fetchDistricts = async (stateId) => {
        try {
            const response = await axios.get(`${BASE_URL}/district/${stateId}`);
            setDistricts(
                response.data.map((district) => ({
                    value: district.dtcode11,
                    label: district.name11,
                }))
            );
        } catch (error) {
            console.error("Error fetching districts:", error);
        }
    };

    const fetchTalukas = async (districtName) => {
        try {
            const response = await axios.get(`${BASE_URL}/taluks/${districtName}`);
            setTalukas(
                response.data.map((taluka) => ({
                    value: taluka.gid,
                    label: taluka.name11,
                }))
            );
        } catch (error) {
            console.error("Error fetching talukas:", error);
        }
    };

    const handleStateChange = (selectedOption) => {
        setSelectedState(selectedOption);
        setSelectedDistrict(null);
        setSelectedTaluka(null);
        setDistricts([]);
        setTalukas([]);
        if (selectedOption) {
            fetchDistricts(selectedOption.value);
        }
    };

    const handleDistrictChange = (selectedOption) => {
        setSelectedDistrict(selectedOption);
        setSelectedTaluka(null);
        setTalukas([]);
        if (selectedOption) {
            fetchTalukas(selectedOption.label);
        }
    };

    return (
        <div>
            <MapComponent
                selectedState={selectedState}
                selectedDistrict={selectedDistrict}
                selectedTaluka={selectedTaluka}
            />

            <Box sx={{ position: "absolute", top: 20, right: 20, p: 2 }}>
                <Button
                    variant="contained"
                    color="primary"
                    startIcon={<NavigationIcon />}
                    onClick={() => setIsOpen(!isOpen)}
                >
                    Navigation
                </Button>

                {isOpen && (
                    <Paper
                        elevation={4}
                        sx={{
                            position: "absolute",
                            top: 60,
                            right: 10,
                            width: 320,
                            p: 3,
                            borderRadius: 2,
                        }}
                    >
                        <IconButton
                            onClick={() => setIsOpen(false)}
                            sx={{ position: "absolute", top: 10, right: 10 }}
                        >
                            <CloseIcon />
                        </IconButton>

                        <Typography variant="h6" sx={{ mb: 2 }}>
                            Select Location
                        </Typography>

                        <Box sx={{ mb: 2 }}>
                            <Typography variant="body2" sx={{ mb: 1 }}>
                                State:
                            </Typography>
                            <Select
                                options={states}
                                value={selectedState}
                                onChange={handleStateChange}
                                placeholder="Select State"
                                isClearable
                            />
                        </Box>

                        <Box sx={{ mb: 2 }}>
                            <Typography variant="body2" sx={{ mb: 1 }}>
                                District:
                            </Typography>
                            <Select
                                options={districts}
                                value={selectedDistrict}
                                onChange={handleDistrictChange}
                                placeholder="Select District"
                                isDisabled={!selectedState}
                                isClearable
                            />
                        </Box>

                        <Box>
                            <Typography variant="body2" sx={{ mb: 1 }}>
                                Taluka:
                            </Typography>
                            <Select
                                options={talukas}
                                value={selectedTaluka}
                                onChange={(selectedOption) =>
                                    setSelectedTaluka(selectedOption)
                                }
                                placeholder="Select Taluka"
                                isDisabled={!selectedDistrict}
                                isClearable
                            />
                        </Box>
                    </Paper>
                )}
            </Box>
        </div>
    );
};

export default MapNavigation;


-----------------------------------------------------------


import React, { useEffect, useRef } from "react";
import "ol/ol.css";
import { Map, View } from "ol";
import TileLayer from "ol/layer/Tile";
import TileWMS from "ol/source/TileWMS";

const MapComponent = ({ selectedState, selectedDistrict, selectedTaluka }) => {
    const mapRef = useRef(null);

    useEffect(() => {
        if (!mapRef.current) {
            mapRef.current = new Map({
                target: "map",
                layers: [
                    new TileLayer({
                        source: new TileWMS({
                            url: "http://localhost:8080/geoserver/cite/wms",
                            params: { LAYERS: "india_boundary", TILED: true },
                        }),
                    }),
                ],
                view: new View({
                    center: [0, 0],
                    zoom: 4,
                }),
            });
        }
        const map = mapRef.current;

        const updateMapLayer = (layerName, filterField, filterValue) => {
            const layer = new TileLayer({
                source: new TileWMS({
                    url: "http://localhost:8080/geoserver/cite/wms",
                    params: {
                        LAYERS: layerName,
                        CQL_FILTER: filterValue
                            ? `${filterField} = '${filterValue}'`
                            : undefined,
                    },
                }),
            });
            map.getLayers().clear();
            map.addLayer(layer);
        };

        if (selectedTaluka) {
            updateMapLayer("taluka_boundry_21_03_2023", "gid", selectedTaluka.value);
        } else if (selectedDistrict) {
            updateMapLayer("district_boundry_21_03_2023", "dtcode11", selectedDistrict.value);
        } else if (selectedState) {
            updateMapLayer("state_boundry_21_03_2023", "stcode11", selectedState.value);
        }
    }, [selectedState, selectedDistrict, selectedTaluka]);

    return <div id="map" style={{ width: "100%", height: "500px" }}></div>;
};

export default MapComponent;



