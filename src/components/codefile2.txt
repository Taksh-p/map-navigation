import React, { useEffect, useRef, useState } from 'react';
import 'ol/ol.css';
import { Map, View } from 'ol';
import TileLayer from 'ol/layer/Tile';
import TileWMS from 'ol/source/TileWMS';
import { fromLonLat } from 'ol/proj';

const App = () => {
    const mapRef = useRef(null);
    const layersRef = useRef([]);
    const [selectedState, setSelectedState] = useState(null);
    const [selectedDistrict, setSelectedDistrict] = useState(null);
    const [selectedTaluka, setSelectedTaluka] = useState(null);

    // Update the map with new layers and zoom dynamically
    const updateTheMap = async (layerName, filterFieldName, filterValue) => {
        const layer = new TileLayer({
            source: new TileWMS({
                url: 'http://localhost:8080/geoserver/cite/wms',
                params: {
                    LAYERS: layerName,
                    TILED: true,
                    CQL_FILTER: filterValue ? `${filterFieldName} = '${filterValue}'` : undefined,
                },
                serverType: 'geoserver',
                crossOrigin: 'anonymous',
            }),
        });

        // Fetch extent dynamically
        if (filterValue) {
            const extentUrl = `http://localhost:8080/geoserver/wfs?service=WFS&version=1.1.0&request=GetFeature&typeName=${layerName}&CQL_FILTER=${filterFieldName}='${filterValue}'&outputFormat=application/json`;
            try {
                const response = await fetch(extentUrl);
                const data = await response.json();
                if (data.features.length > 0) {
                    const extent = data.features[0].bbox; // Bounding box: [minX, minY, maxX, maxY]
                    if (extent) {
                        mapRef.current.getView().fit(extent, { duration: 1000, maxZoom: 10 }); // Adjust maxZoom as needed
                    }
                }
            } catch (error) {
                console.error("Error fetching extent:", error);
            }
        }

        return layer;
    };

    useEffect(() => {
        if (!mapRef.current) {
            mapRef.current = new Map({
                target: 'map',
                layers: [
                    new TileLayer({
                        source: new TileWMS({
                            url: 'http://localhost:8080/geoserver/cite/wms',
                            params: { LAYERS: 'india_boundary', TILED: true },
                            serverType: 'geoserver',
                            crossOrigin: 'anonymous',
                        }),
                    }),
                ],
                view: new View({
                    center: fromLonLat([78.9629, 20.5937]), // India center
                    zoom: 4,
                }),
            });
        }

        const map = mapRef.current;
        const baseLayer = map.getLayers().item(0);
        map.getLayers().clear();
        map.addLayer(baseLayer);

        const updateMap = async () => {
            const newLayers = [];
            if (selectedState && !selectedDistrict && !selectedTaluka) {
                newLayers.push(await updateTheMap('state_boundry_21_03_2023', 'stcode11', selectedState.value));
            }
            if (selectedState && selectedDistrict && !selectedTaluka) {
                newLayers.push(await updateTheMap('district_boundry_21_03_2023', 'dtcode11', selectedDistrict.value));
            }
            if (selectedState && selectedDistrict && selectedTaluka) {
                newLayers.push(await updateTheMap('taluka_boundry_21_03_2023', 'name11', selectedTaluka.label));
            }

            newLayers.forEach((layer) => map.addLayer(layer));
            layersRef.current = newLayers;
        };

        updateMap();

        return () => {
            layersRef.current.forEach((layer) => {
                map.removeLayer(layer);
            });
            layersRef.current = [];
        };
    }, [selectedState, selectedDistrict, selectedTaluka]);

    return (
        <div>
            <div style={{ marginBottom: '1rem' }}>
                <select onChange={(e) => setSelectedState({ value: e.target.value })}>
                    <option value="">Select State</option>
                    <option value="01">State 1</option>
                    <option value="02">State 2</option>
                </select>
                <select onChange={(e) => setSelectedDistrict({ value: e.target.value })}>
                    <option value="">Select District</option>
                    <option value="101">District 101</option>
                    <option value="102">District 102</option>
                </select>
                <select onChange={(e) => setSelectedTaluka({ label: e.target.value })}>
                    <option value="">Select Taluka</option>
                    <option value="Taluka1">Taluka 1</option>
                    <option value="Taluka2">Taluka 2</option>
                </select>
            </div>
            <div id="map" style={{ width: '100%', height: '500px' }}></div>
        </div>
    );
};

export default App;
