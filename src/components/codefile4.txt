import React, { useState, useEffect } from "react";
import Select from "react-select";
import { Button, Box, Paper, Typography } from "@mui/material";
import NavigationIcon from "@mui/icons-material/Navigation";
import axios from "axios";
import MapComponent from "./MapComponent";

const MapNavigation = () => {
    const [isOpen, setIsOpen] = useState(false);
    const [states, setStates] = useState([]);
    const [districts, setDistricts] = useState([]);
    const [talukas, setTalukas] = useState([]);
    const [selectedState, setSelectedState] = useState(null);
    const [selectedDistrict, setSelectedDistrict] = useState(null);
    const [selectedTaluka, setSelectedTaluka] = useState(null);
    const [extent, setExtent] = useState(null);

    const BASE_URL = "http://localhost:8080/api/map";

    useEffect(() => {
        if (isOpen) {
            fetchStates();
        }
    }, [isOpen]);

    const fetchStates = async () => {
        try {
            const response = await axios.get(`${BASE_URL}/getStates`);
            setStates(response.data.map((state) => ({ 
                value: state.stcode11, label: state.stname 
            })));
        } catch (error) {
            console.error("Error fetching states:", error);
        }
    };

    const fetchDistricts = async (stateId) => {
        try {
            const response = await axios.get(`${BASE_URL}/district/${stateId}`);
            setDistricts(response.data.map((district) => ({ 
                value: district.dtcode11, label: district.name11, 
                extent: { minX: district.minx, minY: district.miny, maxX: district.maxx, maxY: district.maxy }
            })));
        } catch (error) {
            console.error("Error fetching districts:", error);
        }
    };

    const fetchTalukas = async (districtName) => {
        try {
            const response = await axios.get(`${BASE_URL}/taluks/${districtName}`);
            setTalukas(response.data.map((taluka) => ({ 
                value: taluka.gid, label: taluka.name11,
                extent: { minX: taluka.minx, minY: taluka.miny, maxX: taluka.maxx, maxY: taluka.maxy }
            })));
        } catch (error) {
            console.error("Error fetching talukas:", error);
        }
    };

    const handleStateChange = (selectedOption) => {
        setSelectedState(selectedOption);
        setSelectedDistrict(null);
        setSelectedTaluka(null);
        setDistricts([]);
        setTalukas([]);
        if (selectedOption) {
            fetchDistricts(selectedOption.value);
        }
    };

    const handleDistrictChange = (selectedOption) => {
        setSelectedDistrict(selectedOption);
        setSelectedTaluka(null);
        setTalukas([]);
        if (selectedOption) {
            fetchTalukas(selectedOption.label);
            setExtent(selectedOption.extent); // Set extent from district
        }
    };

    const handleTalukaChange = (selectedOption) => {
        setSelectedTaluka(selectedOption);
        if (selectedOption) {
            setExtent(selectedOption.extent); // Set extent from taluka
        }
    };

    const customStyle = {
        control: (provided) => ({
            ...provided,
            borderColor: '#ccc',
            boxShadow: 'none',
            '&:hover': {
                borderColor: '#aaa'
            }
        }),
        option: (provided, state) => ({
            ...provided,
            color: state.isSelected ? 'white' : 'black',
            backgroundColor: state.isSelected ? '#007bff' : 'white',
            fontSize: '13px',
            '&:hover': {
                backgroundColor: '#007bff',
                color: 'white'
            }
        }),
        singleValue: (provided) => ({
            ...provided,
            color: 'black',
            fontSize: '10px'
        }),
    };

    return (
        <div>
            <MapComponent
                selectedState={selectedState}
                selectedDistrict={selectedDistrict}
                selectedTaluka={selectedTaluka}
                extent={extent}
            />

            <Box sx={{ position: "absolute", top: 20, right: 20, p: 2 }}>
                <Button
                    variant="contained"
                    color="primary"
                    startIcon={<NavigationIcon />}
                    onClick={() => setIsOpen(!isOpen)}
                    sx={{ position: "absolute", top: 10, right: 10 }}
                >
                    Navigation
                </Button>

                {isOpen && (
                    <Paper
                        elevation={4}
                        sx={{
                            position: "absolute",
                            top: 60,
                            right: 10,
                            width: 320,
                            p: 3,
                            borderRadius: 2,
                        }}
                    >
                        <Typography variant="h6" sx={{ mb: 2 }}>
                            Select Location
                        </Typography>

                        {/* State Dropdown */}
                        <Box sx={{ mb: 2 }}>
                            <Select
                                options={states}
                                value={selectedState}
                                onChange={handleStateChange}
                                placeholder="Select State"
                                isClearable
                            />
                        </Box>

                        {/* District Dropdown */}
                        <Box sx={{ mb: 2 }}>
                            <Select
                                options={districts}
                                value={selectedDistrict}
                                onChange={handleDistrictChange}
                                placeholder="Select District"
                                isDisabled={!selectedState}
                                isClearable
                            />
                        </Box>

                        {/* Taluka Dropdown */}
                        <Box>
                            <Select
                                options={talukas}
                                value={selectedTaluka}
                                onChange={handleTalukaChange}
                                placeholder="Select Taluka"
                                isDisabled={!selectedDistrict}
                                isClearable
                            />
                        </Box>
                    </Paper>
                )}
            </Box>
        </div>
    );
};

export default MapNavigation;


-----------------------------------------



import React, { useEffect, useRef, useState } from "react";
import L from "leaflet";

const MapComponent = ({ selectedState, selectedDistrict, selectedTaluka, extent }) => {
    const mapRef = useRef(null);
    const [map, setMap] = useState(null);

    useEffect(() => {
        const initMap = () => {
            const mapInstance = L.map(mapRef.current, {
                center: [20.5937, 78.9629], // Default to India center
                zoom: 5, // Default zoom level
            });
            L.tileLayer("https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(mapInstance);
            setMap(mapInstance);
        };

        if (!map) {
            initMap();
        }

        return () => {
            if (map) {
                map.remove();
            }
        };
    }, [map]);

    useEffect(() => {
        if (map && extent) {
            const { minX, minY, maxX, maxY } = extent;
            const bounds = new L.LatLngBounds(
                new L.LatLng(minY, minX),
                new L.LatLng(maxY, maxX)
            );
            map.fitBounds(bounds);
        }
    }, [map, extent]);

    return <div ref={mapRef} style={{ height: "500px", width: "100%" }} />;
};

export default MapComponent;
